/***************************************************************************
#                     NORTH CAROLINA STATE UNIVERSITY
#                                  CESR
#
# File Name     : array_skill.ill
#
# Purpose       : Script to generate memory array and call other scripts
# Version       : 1.0
# Date          :
# Author        : Tanmay Shah
#
#**************************************************************************/


;; Full layout generation

;; Cell name of the CAM
sprintf(str,"cam_%d_%d_%d_%d",D,W,Rp,Wp)

;; Maximum height(in +ve Y) reached after 
;; placement of all bitcells
max_height=del_h*D

;; Minimum heigh (in -ve Y) reachde after
;; placement of all bitcells
min_heihgt=0.00

;; cell view of current cell (CAM)
cv = dbOpenCellViewByType("Skill_test" str "layout" "maskLayout" "w")

;; Bitcell name
sprintf(str,"%dr%dw_new",Rp,Wp)
bit_cv = dbOpenCellViewByType("CAM" str "layout" "maskLayout" "r")

;; Opening other circuits in read-mode to instantiate
buff3_cv = dbOpenCellViewByType("dual_bitline" "buff" "layout" "maskLayout" "r")
buff2_cv = dbOpenCellViewByType("dual_bitline" "buff2" "layout" "maskLayout" "r")
M4M3_cv = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "M4_M3_via" "via" "maskLayout" "r")
M2M3_cvB = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "M3_M2_viaB" "via" "maskLayout" "r")
M2M3_cv = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "M3_M2_via" "via" "maskLayout" "r")
M2M1_cv = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "M2_M1_viaB" "via" "maskLayout" "r")
M2M1_cv1 = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "M2_M1_via" "via" "maskLayout" "r")
M1P_cv = dbOpenCellViewByType("dual_bitline" "M1_POLY" "layout" "maskLayout" "r")
M1N_cv = dbOpenCellViewByType("dual_bitline" "M1_N" "layout" "maskLayout" "r")
NTAP_cv = dbOpenCellViewByType("dual_bitline" "NTAP" "layout" "maskLayout" "r")
PTAP_cv = dbOpenCellViewByType("dual_bitline" "PTAP" "layout" "maskLayout" "r")
nm_cv = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "nmos_vtl" "layout" "maskLayout" "r")
pm_cv = dbOpenCellViewByType("NCSU_TechLib_FreePDK45" "pmos_vtl" "layout" "maskLayout" "r")
winv_cv = dbOpenCellViewByType("dual_bitline" "inverter" "layout" "maskLayout" "r")
invfing2_cv=dbOpenCellViewByType("dual_bitline" "inv_finger2" "layout" "maskLayout" "r")

PITCH_M2 = 0.14
PITCH_M1 = 0.13
flag = 0 
height=0.0 
width=0.0

instance_no = 0

;; PMOS W size in NAND decoder
if(D<=4 then pm_dw=0.18
else if(D<=32 then pm_dw=0.36
else pm_dw = 0.72 
))

;; write ckt width and height
delW_wdata=0.75
delH_wdata=1.7575

;; Chain of 2 sized inverter: width and height
delH_buff2=0.965
delW_buff2=0.98

;; Bitcell placement to create CAM array
;; on alternate layer bitcells are inverted vertically
;; to share the supply lines (VDD and GND) between 2 rows
;; For this, flagH and flagV are used
for( i 1 D
    width = 0.0 
    for( j 1 W 
         if( flag==0 then 
 	        dbCreateInst(cv bit_cv nil list(width height) "R0")
         else   dbCreateInst(cv bit_cv nil list(width height) "MX")
	 ) ;; if
         width = width + del_w 
         instance_no++ 
    ) ;; for
    if( flag==0 then 
        height = height + del_h + del_h 
        flag = 1
    else flag = 0 
    ) ;; if
) ;; for

;; btl_arrray to assign the btl/btlb a number 
;; write btlb are numberd from 1 to Wp
;; read btlb are numbered from Wp+1 to Wp+Rp
;; read btl are numbered from Rp+Wp+1 2Rp+Wp
;; Write btl are numberd from 2Rp+Wp+1 to 2Rp+2Wp

;; btl_posi to keep btl and btlb sorted according to their location

declare(btl_array[(Rp+Wp)*2])
declare(btl_posi[(Rp+Wp)*2])
declare(btl_layer[(Rp+Wp)*2])
declare(wl_array[(Rp+Wp)])
declare(wl_posi[(Rp+Wp)])

;; database queries
bit_label = bit_cv~>shapes~>theLabel
bit_bbox = bit_cv~>shapes~>bBox
bit_layer= bit_cv~>shapes~>layer

;; number of members of the list
len = length(bit_label)
j=0
k=0
for( i 1 len
    if((nth(i bit_label)!= nil &&  nth(i bit_label)!="gnd!" && nth(i bit_label)!="Vdd!") then
	str = nth(i bit_label)
	sscanf(str,"%c%d_%s",r_or_w,num,wl_btl)
	if( r_or_w == 'r then
	   if(wl_btl == "btl" then
		btl_array[j] = num 
		btl_posi[j] = (nth(0 nth( 0 nth(i bit_bbox))) + nth(0 nth( 1 nth(i bit_bbox))))/2
        	btl_layer[j]=nth(i bit_layer)
		j++
   	   else if(wl_btl == "btlb" then
		btl_array[j] = num+Rp 
		btl_posi[j] = (nth(0 nth( 0 nth(i bit_bbox))) + nth(0 nth( 1 nth(i bit_bbox))))/2
        	btl_layer[j]=nth(i bit_layer)
		j++
   	   else wl_posi[k]=(nth(1 nth( 0 nth(i bit_bbox))) + nth(1 nth( 1 nth(i bit_bbox))))/2
		wl_array[k] = num
		k++
   		) ;; if
	    ) ;; if 
	else if(wl_btl == "btl" then
		btl_array[j] = num+2*Rp 
		btl_posi[j] = (nth(0 nth( 0 nth(i bit_bbox))) + nth(0 nth( 1 nth(i bit_bbox))))/2
	        btl_layer[j]=nth(i bit_layer)
		j++
	else if(wl_btl == "btlb" then
		btl_array[j] = num+2*Rp+Wp 
		btl_posi[j] = (nth(0 nth( 0 nth(i bit_bbox))) + nth(0 nth( 1 nth(i bit_bbox))))/2
	        btl_layer[j]=nth(i bit_layer)
		j++
	      else
		wl_posi[k]=(nth(1 nth( 0 nth(i bit_bbox))) + nth(1 nth( 1 nth(i bit_bbox))))/2
		wl_array[k] = num+Rp
		k++
	      ) ;; if
        ) ;;if
       ); if
    );if
 );for

;BTL array sorting
for(j 1 (Rp+Wp)*2
   for(i 1 (Rp+Wp)*2-1
	if(btl_posi[i] < btl_posi[i-1] then
	     temp1 = btl_posi[i] 
	     btl_posi[i] = btl_posi[i-1]
	     btl_posi[i-1] = temp1
	     temp2 = btl_array[i] 
	     btl_array[i] = btl_array[i-1]
             btl_array[i-1] = temp2
             temp3 = btl_layer[i] 
             btl_layer[i] = btl_layer[i-1]
             btl_layer[i-1] = temp3
	) ;; if
   ) ;; for
) ;; for

;;WL array sorting
for(j 1 (Rp+Wp)
   for(i 1 (Rp+Wp)-1
	if(wl_posi[i] < wl_posi[i-1] then
	      temp1 = wl_posi[i] 
	      wl_posi[i] = wl_posi[i-1]
	      wl_posi[i-1] = temp1
	      temp2 = wl_array[i] 
	      wl_array[i] = wl_array[i-1]
	      wl_array[i-1] = temp2
	)
   )
)

;; WL are routed on the metal layer-2
;; WL driver output is routed to the arrray 
;; on metal layer-3. 
;; So: VIA placement for the WL from array to buffer connection

;; Bitcells are inverted on alternate layer and so need to be 
;; tracked using flagV and flagH
flagV=0
flagH=0
for(j 1 D
flagH=0
     if(flagV==0 then
	for(i 1 Rp+Wp
	   height = del_h*(j-1) + wl_posi[i-1]
	   if(flagH==0 then width = -0.11 flagH = 1
	   else width = - 0.11 - PITCH_M2
	   flagH = 0)
	   if(wl_array[i-1]>Rp then
	   dbCreateInst(cv M2M3_cvB nil list(width height) "R90") )
	   ) ; for_loop
	   flagV=1
     else
	for(i 1 Rp+Wp
     	    height = del_h*j - wl_posi[i-1] /*wl_posi[Rp+Wp-i] */
	    if(flagH==0 then width = -0.11 flagH = 1
	    else width = - 0.11 - PITCH_M2
	    flagH = 0)
	    if(wl_array[i-1]>Rp then
	    dbCreateInst(cv M2M3_cvB nil list(width height) "R90") )
	    ) ; for_loop 
	    flagV=0) 
)

;; WL driver placement
delW_buff = 2.375+0.115
delH_buff = 1.155
flagV=0
flagH=0

;; number of decoders on right and left
;; for CAM right side no decoder is placed
b_on_right = 0 
b_on_left = Wp

declare(well_left0[b_on_left])
declare(well_left1[b_on_left])

for(i 0 b_on_left-1
    well_left0[i]=-0.4675
    well_left1[i]=-0.4675)


for(j 1 D
     flagH=0
     k = 0;
     if(flagV==0 then
     widthL = -2.7 - PITCH_M2
	for(i 1 Rp+Wp
	   height = del_h*(j-1) + wl_posi[i-1]
		if(wl_array[i-1]>Rp then
		dbCreateInst(cv buff3_cv nil list(widthL height) "R0")
		dbCreateRect(cv "nwell" list(widthL+0.0725:height-0.6875 widthL+0.9275:well_left1[k]+0.4675))
		dbCreateRect(cv "pwell" list(widthL+0.9275:height-0.6875 widthL+2.5625:well_left1[k]+0.4675))
		widthL = widthL - delW_buff
		well_left0[Wp-k-1]=height
		k = k + 1	
		) ; if_cond	
	    )
	flagV = 1
     else
     widthL = -2.7 - PITCH_M2 - (Wp-1)*delW_buff
	for(i 1 Rp+Wp
	        height = del_h*j - wl_posi[i-1]		
		if(wl_array[i-1]>Rp then
		dbCreateInst(cv buff3_cv nil list(widthL height) "R0")
		dbCreateRect(cv "nwell" list(widthL+0.0725:height-0.6875 widthL+0.9275:well_left0[k]+0.4675))
		dbCreateRect(cv "pwell" list(widthL+0.9275:height-0.6875 widthL+2.5625:well_left0[k]+0.4675))
		widthL = widthL + delW_buff
		well_left1[Wp-k-1]=height
		k = k + 1
		) ; if_cond
)
	    flagV=0) 
)

loadi("layout_CAM/decode_left.ill")

;; GND & VDD wires throughout the buffers
for(i 0 b_on_left-1
	dbCreatePath(cv "metal2" list(-2.7-PITCH_M2-delW_buff*i+1.1875:-3.5*PITCH_M2 -2.7-PITCH_M2-delW_buff*i+1.1875:del_h*D+PITCH_M2/4) 0.07)
	dbCreatePath(cv "metal2" list(-2.7-PITCH_M2-delW_buff*i+2.365:0.00 -2.7-PITCH_M2-delW_buff*i+2.365:del_h*D+2*PITCH_M2) 0.07)    
	dbCreateInst(cv M2M1_cv nil list(-2.7-PITCH_M2-delW_buff*i+2.365 del_h*D+2*PITCH_M2) "R0")
	dbCreateInst(cv M2M1_cv1 nil list(-2.7-PITCH_M2-delW_buff*i+1.1875 -3.5*PITCH_M2) "R0")
  )
maxneg_height = 0.0
;; Write Data
loadi("layout_CAM/wdata_nodc1.ill")
;; SL driver
loadi("layout_CAM/SL_ckt.ill")
;; ML precharge
loadi("layout_CAM/precharge.ill")

dbCreatePath(cv "metal3" list(-PITCH_M2:del_h*D -PITCH_M2:max_height) 0.07);; GND
dbCreatePath(cv "metal3" list(-2*PITCH_M2:del_h*D -2*PITCH_M2:max_height) 0.07) ;;CLK
dbCreatePath(cv "metal3" list(-3*PITCH_M2:del_h*D -3*PITCH_M2:max_height) 0.07) ;;VDD

dbCreatePath(cv "metal3" list(del_w*W+PITCH_M2:del_h*D del_w*W+PITCH_M2:max_height) 0.07) ;;VDD
dbCreatePath(cv "metal3" list(del_w*W+2*PITCH_M2:del_h*D del_w*W+2*PITCH_M2:max_height) 0.07) ;;CLK
dbCreatePath(cv "metal3" list(del_w*W+3*PITCH_M2:del_h*D del_w*W+3*PITCH_M2:max_height) 0.07) ;;GND

dbCreatePath(cv "metal3" list(-PITCH_M2:0.00 -PITCH_M2:maxneg_height) 0.07)
dbCreatePath(cv "metal3" list(-2*PITCH_M2:0.00 -2*PITCH_M2:maxneg_height) 0.07)
dbCreatePath(cv "metal3" list(del_w*W+PITCH_M2:-2*PITCH_M2 del_w*W+PITCH_M2:maxneg_height) 0.07)

;; VDD and GND of array
dbCreatePath(cv "metal1" list(-PITCH_M2:-PITCH_M1/4 -PITCH_M2:del_h*D+2*PITCH_M2+PITCH_M1/4) 0.065)
dbCreatePath(cv "metal1" list(W*del_w+PITCH_M1:del_h-PITCH_M1/4 W*del_w+PITCH_M1:del_h*D+PITCH_M1/4) 0.065)
dbCreateInst(cv M2M1_cv nil list(W*del_w+PITCH_M2 del_h*D) "R0")
dbCreateInst(cv M2M3_cvB nil list(W*del_w+PITCH_M2 del_h*D) "R0")

;; CLK routing
width=2.7+PITCH_M2+(b_on_left-1)*delW_buff+b_on_left*((row_bits+1)*2*PITCH_M2+0.46)
dbCreatePath(cv "metal3" list(-width:del_h*D+3*PITCH_M2 -4*PITCH_M2:del_h*D+3*PITCH_M2) 0.07)
dbCreatePath(cv "metal2" list(-4*PITCH_M2:del_h*D+3*PITCH_M2 -2*PITCH_M2:del_h*D+3*PITCH_M2) 0.07)
dbCreateInst(cv M2M3_cv nil list(-2*PITCH_M2 del_h*D+3*PITCH_M2) "R90");

dbCreateInst(cv M2M3_cv nil list(-4*PITCH_M2 del_h*D+3*PITCH_M2) "R90")
dbCreateLabel(cv "metal1" -5*PITCH_M2:del_h*D+2*PITCH_M2 "vdd!" "centerCenter" "R0" "roman" 0.0275)
dbCreateLabel(cv "metal1" 4*PITCH_M2:0.000 "gnd!" "centerCenter" "R0" "roman" 0.0275)
dbCreateLabel(cv "metal3" -5*PITCH_M2:del_h*D+3*PITCH_M2 "clk" "centerCenter" "R0" "roman" 0.0275)

dbSave(cv)
dbClose(bit_cv)
dbClose(buff3_cv)
dbClose(buff2_cv)
dbClose(M4M3_cv)
dbClose(M2M3_cvB)
dbClose(M2M3_cv)
dbClose(M2M1_cv) 
dbClose(winv_cv) 
dbClose(M1P_cv)
dbClose(M1N_cv)
dbClose(nm_cv)
dbClose(pm_cv)
dbClose(invfing2_cv)

dbClose(cv)




